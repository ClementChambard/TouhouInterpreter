!COPY_VARS_TO(e) = stripped {
    for (int i = 0; i < 4; i++)
        e->enemy.ecl_int_vars[i] = enemy.ecl_int_vars[i];
    for (int i = 0; i < 8; i++)
        e->enemy.ecl_float_vars[i] = enemy.ecl_float_vars[i];
    e->parentEnemyId = enemyId;
}

!COPY_VARS_TO_M(e) = stripped {
    for (int i = 0; i < 4; i++)
        e->enemy.ecl_int_vars[i] = enemy.ecl_int_vars[i];
    for (int i = 0; i < 8; i++)
        e->enemy.ecl_float_vars[i] = enemy.ecl_float_vars[i];
    e->parentEnemyId = enemyId;
    e->enemy.flags |= 0x80000;
}

!ANM_SLOT(a) = stripped {
    ENEMY_MANAGER_PTR->loadedAnms[a]->getSlot()
}

!IS_BOSS = stripped {
    (EnemyManager::GetInstance()->boss_ids[0] > 0 && EnemyManager::GetInstance()->EnmFind(EnemyManager::GetInstance()->boss_ids[0]))
}

/*
    ENEMY CREATION AND ANM SCRIPT
*/

// Create enemy relative to creator
enmCreate @ 300 (string sub, float x, float y, int hp, int score, int item) {
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x + enemy.final_pos.pos.x, y + enemy.final_pos.pos.y, hp, score, item);
    if (e)
        COPY_VARS_TO(e);
}

// Create enemy at absolute position
enmCreateA @ 301 (string sub, float x, float y, int hp, int score, int item) {
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x, y, hp, score, item);
    if (e)
        COPY_VARS_TO(e);
}

// Create mirrored enemy relative to creator
enmCreateM @ 304 (string sub, float x, float y, int hp, int score, int item) {
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x + enemy.final_pos.pos.x, y + enemy.final_pos.pos.y, hp, score, item);
    if (e)
        COPY_VARS_TO_M(e);
}

// Create mirrored enemy at absolute position
enmCreateAM @ 305 (string sub, float x, float y, int hp, int score, int item) {
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x, y, hp, score, item);
    if (e)
        COPY_VARS_TO_M(e);
}

// Create filler enemy relatice to creator
enmCreateF @ 309 (string sub, float x, float y, int hp, int score, int item) {
    if (IS_BOSS) return;
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x + enemy.final_pos.pos.x, y + enemy.final_pos.pos.y, hp, score, item);
    if (e)
        COPY_VARS_TO(e);
}

// Create filler enemy at absolute position
enmCreateAF @ 310 (string sub, float x, float y, int hp, int score, int item) {
    if (IS_BOSS) return;
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x, y, hp, score, item);
    if (e)
        COPY_VARS_TO(e);
}

// Create mirrored filler enemy relatice to creator
enmCreateMF @ 311 (string sub, float x, float y, int hp, int score, int item) {
    if (IS_BOSS) return;
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x + enemy.final_pos.pos.x, y + enemy.final_pos.pos.y, hp, score, item);
    if (e)
        COPY_VARS_TO_M(e);
}

// Create mirrored filler enemy at absolute position
enmCreateAMF @ 312 (string sub, float x, float y, int hp, int score, int item) {
    if (IS_BOSS) return;
    auto e = EnemyManager::GetInstance()->SpawnEnemy(sub,
        x, y, hp, score, item);
    if (e)
        COPY_VARS_TO_M(e);
}

anmSelect @ 302 (int anmID) {
    enemy.selectedAnmID = anmID;
}

anmSetSpr @ 303 (int slot, int scr) {
    AnmManager::deleteVM(enemy.anmIds[slot].val);
    if (scr < 0) {
        enemy.anmIds[slot].val = 0;
    } else {
        int id = AnmManager::SpawnVM(ANM_SLOT(enemy.selectedAnmID), scr);
        if (AnmManager::getVM(id)) {
            // set invisible if intangible enemy,
            // set finalSpriteSize and anmslot0... if slot = 0
        } else {
            id = 0;
        }
        enemy.anmIds[slot].val = id;
    }
}

anmSetMain @ 306 (int slot, int src) {
    AnmManager::deleteVM(enemy.anmIds[slot].val);
    if (scr < 0) {
        enemy.anmIds[slot].val = 0;
    } else {
        int id = AnmManager::SpawnVM(ANM_SLOT(enemy.selectedAnmID), scr);
        if (AnmManager::getVM(id)) {
            // set invisible if intangible enemy,
            // set finalSpriteSize and anmslot0... if slot = 0
        } else {
            id = 0;
        }
        enemy.anmIds[slot].val = id;
    }
    if (slot == 0) {
        enemy.flags |= 0x100000;
        enemy.anm0anmID = enemy.selectedAnmID;
        enemy.anm0scr = scr;
        enemy.anmSetMain = scr;
        enemy.anmMainSubscr = 0;
    }
}

anmPlay @ 307 (int anm, int scr) {
    auto vm = AnmManager::getVM(AnmManager::SpawnVM(ANM_SLOT(anm), scr));
    if (vm)
        vm->setEntityPos(enemy.abs_pos.pos.x,
                         enemy.abs_pos.pos.y, enemy.abs_pos.pos.z);
}

anmPlayAbs @ 308 (int anm, int scr) {
    AnmManager::SpawnVM(ANM_SLOT(anm), scr);
}

anmSelPlay @ 313 (int slot) {
    AnmManager::deleteVM(enemy.anmIds[slot].val);
    int id = AnmManager::SpawnVM(ANM_SLOT(enemy.selectedAnmID),
                                 enemy.anmSetMain + 5);
    if (AnmManager::getVM(id)) {
        // set invisible if intangible enemy,
        // set finalSpriteSize and anmslot0... if slot = 0
    } else {
        id = 0;
    }
    enemy.anmIds[slot].val = id;
}

anmPlayHigh @ 314 (int anm, int scr) {
    auto vm = AnmManager::getVM(AnmManager::SpawnVM(ANM_SLOT(anm), scr));
    if (vm)
        vm->setEntityPos(enemy.abs_pos.pos.x,
                         enemy.abs_pos.pos.y, enemy.abs_pos.pos.z);
}

anmPlayRotate @ 315 (int anm, int src, float rot) {
    auto vm = AnmManager::getVM(AnmManager::SpawnVM(ANM_SLOT(anm), scr));
    if (vm)
        vm->setEntityPos(enemy.abs_pos.pos.x,
                         enemy.abs_pos.pos.y, enemy.abs_pos.pos.z);
}

anm316 @ 316 (int slot, int scr) {
    AnmManager::deleteVM(enemy.anmIds[slot].val);
    if (scr < 0) {
        enemy.anmIds[slot].val = 0;
    } else {
        int id = AnmManager::SpawnVM(ANM_SLOT(enemy.selectedAnmID),
                                     scr + enemy.anmSetMain + 5);
        if (AnmManager::getVM(id)) {
            // set invisible if intangible enemy,
            // set finalSpriteSize and anmslot0... if slot = 0
        } else {
            id = 0;
        }
        enemy.anmIds[slot].val = id;
    }
}

anmSwitch @ 317 (int slot, int switc) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->interrupt(switc);
}

anmReset @ 318 () {
    AnmManager::deleteVM(enemy.anmIds[0].val);
    enemy.anmIds[0].val = AnmManager::SpawnVM(0, enemy.anmSetMain);
    enemy.flags &= 0xffffffffffefffff;
    enemy.anm0scr = enemy.anmSetMain;
    enemy.anmMainSubscr = 0;
    enemy.anm0anmID = enemy.selectedAnmID;
}

anmRotate @ 319 (int slot, float angle) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->rotation.z = angle;
    if (vm)
        vm->bitflags.rotated = 1;
}

anmMove @ 320 (int slot, float x, float y) {
    enemy.anmPos[slot] = { x, y, 0 };
}

enmMapleEnemy @ 321 (string sub, float x, float y, int hp, int score, int item) notimpl {}

enm322 @ 322 (int a, int b) notimpl {}

deathAnm @ 323 (int anm, int scr) {
    enemy.deathAnm = ANM_SLOT(anm);
    enemy.deathScr = scr;
}

enmPos2 @ 324 notimpl {}

anmCol @ 325 (int slot, int r, int g, int b) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->color_1 = { (uint8_t)r, (uint8_t)g, (uint8_t)b, vm->color_1.a };
}

anmColT @ 326 (int slot, int t, int m, int r, int g, int b) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->rgb1_i.start({ vm->color_1.r, vm->color_1.g, vm->color_1.b },
                         { (uint8_t)r, (uint8_t)g, (uint8_t)b }, t, m);
}

anmAlpha @ 327 (int slot, int a) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->color_1.a = a;
}

anmAlphaT @ 328 (int slot, int t, int m, int a) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->alpha1_i.start(vm->color_1.a, a, t, m);
}

anmScale @ 329 (int slot, float x, float y) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->setScale(x, y);
    if (vm)
        vm->bitflags.scaled = true;
}

anmScaleT @ 330 (int slot, int t, int m, float x, float y) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->scale_i.start(vm->scale, { x, y }, t, m);
}

anmAlpha2 @ 331 (int slot, int a) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->color_2.a = a;
}

anmAlpha2T @ 332 (int slot, int t, int m, int a) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->alpha2_i.start(vm->color_2.a, a, t, m);
    if (vm)
        vm->bitflags.colmode = 1;
}

anmPosT @ 333 (int slot, int t, int m, float x, float y) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->pos_i.start(vm->pos, { x, y, 0.f }, t, m);
}

// effect and anm 508 related, seiga lightning ?
anm334 @ 334 (int a) notimpl {}

anmScale2 @ 335 (int slot, float x, float y) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->bitflags.scaled = 1;
    if (vm)
        vm->scale_2 = { x, y };
}

anmLayer @ 336 (int slot, int layer) {
    auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
    if (vm)
        vm->setLayer(layer);
}

//    _ins(337, anmBM_16_anmPlayPos)
//    if (TOUHOU_VERSION < 16) { _S(anm) _S(scr) _f(x) _f(y) _f(z) _args
//        AnmManager::getVM(AnmManager::SpawnVM(ANM_SLOT(anm), scr))->setPos2(x, y, z);
//    } else { _S(slot) _S(bm) _args
//        auto vm = AnmManager::getVM(enemy.anmIds[slot].val);
//        if (vm)
//            vm->bitflags.blendmode = bm;
//    }

anmPlayPos @ 338 (int anm, int scr, float x, float y, float z) {
    AnmManager::getVM(AnmManager::SpawnVM(ANM_SLOT(anm), scr))->setPos2(x, y, z);
}

anm339 @ 339 (int a, int b, int c) {
    auto vm = AnmManager::getVM(AnmManager::SpawnVM(a+7, b));
    if (vm) {
        for (int i = 0; i < c; i++)
            vm->update();
    }
}

enmDelete @ 340 (int id) {
    Enemy* e = EnemyManager::GetInstance()->EnmFind(id);
    // should set the delete flag instead and be deleted by the enmMgr
    if (e)
        e->Die();
}
